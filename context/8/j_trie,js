const _readline = require('readline');

const _reader = _readline.createInterface({
    input: process.stdin
});

let inputLines = [];


_reader.on('line', line => {
    inputLines.push(line);
});

class Node {
    constructor(value, next, prev) {
        this.value = value;
        this.next = next;
        this.prev = prev;
    }
}

class ListQueue {
    constructor() {
        this._head = null;
        this._tail = null;
        this._size = 0;
    }

    put(x) {
        const node = new Node(x);
        if (this._size === 0) {
            this._head = node;
            this._tail = node;
        } else {
            const prevTail = this._tail;
            this._tail = node;
            this._tail.prev = prevTail;
            prevTail.next = this._tail;
        }
        this._size++;
    }

    get(){
        if(this._size === 0){
            return null;
        }
        const x = this._head;

        this._head = x.next;
        this._size--;

        return x.value;        
    }

    size(){
        return this._size;
    }

}


// Когда ввод закончится, будет вызвана функция solve.
process.stdin.on('end', solve);

class TrieNode{
    constructor(key){
        this.key = key;
        this.values = [];
        this.parent = null;
        this.children = {};
    }

    getWord(){
        let output = [];
        let node = this;

        while (node !== null){
            output.unshift(node.key);
            node = node.parent;
        }

        return output;
    }
}

class Trie{
    constructor(){
        this.root = new TrieNode(null);
    }

    insert(pattern, fullWord){
        let node = this.root;

        for(let i = 0; i < pattern.length; i++){
            if( !node.children[pattern[i] ]){
                node.children[pattern[i]] = new TrieNode(pattern[i]);
                node.children[pattern[i]].parent = node;
            }

            node = node.children[pattern[i]];

            if( i === pattern.length - 1){
                node.values.push(fullWord);
            }
        }
    }

    find(pattern){
        let node = this.root;
        let result = []
        for(let i = 0; i < pattern.length; i++){
            if( node.children[pattern[i] ]){
                node = node.children[pattern[i] ];
            }else{
                return null;
            }

            if( i === pattern.length - 1){
                result = node.values;
                let hints = this.getHints(node);
                hints.forEach(item =>{
                    result.push(item);
                })
                return result;
            }
        }
        
        // Случай когда пустая строка
        let hints = this.getHints(node);
        hints.forEach(item =>{
            result.push(item);
        });
        return result;
    }

    getHints(node){
        const nodes = [];

        let result = [];

        for(let child in node.children){
            nodes.push(node.children[child]);
        }

        while(nodes.length > 0){
            let currentNode = nodes.pop();
            if(currentNode.values.length > 0){
                currentNode.values.forEach(item =>{
                    result.push(item);
                });
                
            }else{
                result.push(' ');
            }

            for(let child in currentNode.children){
                nodes.push(currentNode.children[child]);
            }

        }

        return result;
    }


}

function getPattern(word){
    let result = '';
    for(let i = 0; i < word.length; i++){
        let charCode = word.charCodeAt(i);
        if(charCode >= 65 && charCode <= 90) {
            result += word[i];
        }
    }

    return result;
}

function solve() {
    const countWords = Number(inputLines[0]);
    
    const trie = new Trie();

    for(let i = 1; i <= countWords; i++){
        let pattern = getPattern(inputLines[i]);
        trie.insert(pattern, inputLines[i]);
    }

    
    let countPatterns = inputLines[countWords+1];
    const skipLines = countWords+2;

    let result = [];
    for(let i = 0; i < countPatterns; i++){
        let pattern = inputLines[skipLines + i];
        let words = trie.find(pattern);
        if(words){
            words.sort();
            words.forEach(item=>{
                result.push(item);
            });
        }else{
            //result.push(' ');
        }
        
    }

    result.forEach(item =>{
        console.log(item);
    });

    //console.log(trie);
}


let input = `5
LydSajzvlOfvvkks
Wtwevxyuzmvxwpfl
XGnMsahinfltysyp
ymfikarglyjabssu
XlrylqwxewevAvvf
3

WOPH
JK

`;

inputLines = input.split('\n');

solve();